/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.eomcs.pms;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import com.eomcs.context.ApplicationContextListener;
import com.eomcs.pms.handler.Command;
import com.eomcs.pms.listener.AppInitListener;
import com.eomcs.pms.listener.DataHandlerListener;
import com.eomcs.pms.listener.RequestMappingListener;

public class ServerApp {
  static boolean stop = false;

  List<ApplicationContextListener> listeners = new ArrayList<>();
  static Map<String, Object> context = new Hashtable<>();
  public void addApplicationContextListener(ApplicationContextListener listener) {
    listeners.add(listener);
  }

  public void removeApplicationContextListener(ApplicationContextListener listener) {
    listeners.remove(listener);
  }
  private void notifyApplicationContextListenerOnServiceSrarted() {
    for (ApplicationContextListener listener : listeners) {
      listener.contextInitialized(context);
    }
  }

  private void notifyApplicationContextListenerOnServiceStopped() {
    for (ApplicationContextListener listener : listeners) {
      listener.contextDestroyed(context);
    }
  }

  public void service(int port) {
    notifyApplicationContextListenerOnServiceSrarted();
    try (ServerSocket ss = new ServerSocket(port)) {
      System.out.println("클라이언트 기다리는 중 ");

      while (true) {

        Socket clientSocket = ss.accept();
        if (stop) {
          break;
        }
        new Thread(() -> handlerClient(clientSocket)).start();
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    notifyApplicationContextListenerOnServiceStopped();
  }

  public static void main(String[] args) {
    ServerApp server = new ServerApp();

    server.addApplicationContextListener(new AppInitListener());
    server.addApplicationContextListener(new DataHandlerListener());
    server.addApplicationContextListener(new RequestMappingListener());
    server.service(8888);
  }


  public static void handlerClient(Socket clientSocket) {
    InetAddress address = clientSocket.getInetAddress();
    System.out.println(address.getHostAddress()+ " 님이 접속하였습니다!");

    try (Socket socket = clientSocket;
        BufferedReader in = new BufferedReader(new InputStreamReader(((socket.getInputStream()))));
        PrintWriter out = new PrintWriter(socket.getOutputStream())){

      String request = in.readLine();

      if(request.equalsIgnoreCase("stop")) {
        stop = true;
        out.println("서버를 종료하는 중입니다!");
        out.println();
        out.flush();
        return;
      }
      Command command = (Command) context.get(request);
      if (command != null) {
        command.execute(out, in);
      } else {
        out.println("그건 안됨");
      }

      out.println();
      out.flush();

    } catch (Exception e) {
      System.out.println("나가");
    }

    System.out.println(address.getHostAddress()+ " 님이 퇴장하였습니다!");
  }

}
